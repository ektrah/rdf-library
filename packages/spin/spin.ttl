@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix ns0: <http://spinrdf.org/spin#> .
@prefix ns1: <http://spinrdf.org/spl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix ns2: <http://spinrdf.org/sp#> .

<http://spinrdf.org/spin>
  a owl:Ontology ;
  owl:versionInfo "1.4" ;
  owl:imports <http://spinrdf.org/sp> ;
  rdfs:label "SPIN Modeling Vocabulary" ;
  rdfs:comment "An RDF Schema that can be used to attach constraints and rules to RDFS classes, and to encapsulate reusable SPARQL queries into functions and templates." .

<http://spinrdf.org/spin#AskTemplate>
  a rdfs:Class ;
  rdfs:subClassOf <http://spinrdf.org/spin#Template> ;
  rdfs:label "Ask template" ;
  rdfs:comment "A SPIN template that wraps an ASK query." ;
  ns0:constraint [
    a <http://spinrdf.org/spl#Attribute> ;
    rdfs:comment "The ASK query wrapped by this template." ;
    ns1:valueType <http://spinrdf.org/sp#Ask> ;
    ns1:predicate ns0:body ;
    ns1:minCount 0 ;
    ns1:maxCount 1
  ] .

ns0:Template
  a rdfs:Class ;
  rdfs:subClassOf ns0:Module ;
  rdfs:label "Template" ;
  rdfs:comment "The metaclass of SPIN templates. Templates are classes that are instances of this class. A template represents a reusable SPARQL query or update request that can be parameterized with arguments. Templates can be instantiated in places where normally a SPARQL query or update request is used, in particular as spin:rules and spin:constraints." ;
  ns0:constraint [
    a ns1:Attribute ;
    rdfs:comment "the body of the Template" ;
    ns1:predicate ns0:body ;
    ns1:minCount 0 ;
    ns1:maxCount 1
  ] .

ns0:body
  a rdf:Property ;
  rdfs:subPropertyOf ns0:systemProperty ;
  rdfs:range <http://spinrdf.org/sp#Command> ;
  rdfs:label "body" ;
  rdfs:comment "The body of a Function or Template. This points to a Query instance. For Functions, this is limited to either ASK or SELECT type queries. If the body is the ASK function then the return value is xsd:boolean. Otherwise, the SELECT query must have a single return variable. The first binding of this SELECT query will be returned as result of the function call." .

ns0:ConstraintViolation
  a rdfs:Class ;
  rdfs:subClassOf rdfs:Resource ;
  rdfs:label "Constraint violation" ;
  rdfs:comment "An object that can be created by spin:constraints to provide information about a constraint violation." .

ns0:ConstraintViolationLevel
  a rdfs:Class ;
  rdfs:subClassOf rdfs:Resource ;
  rdfs:label "Constraint violation level" ;
  rdfs:comment "The type of the supported levels of constraint violations, including spin:Error and spin:Warning." .

ns0:ConstructTemplate
  a rdfs:Class ;
  rdfs:subClassOf ns0:Template ;
  rdfs:label "Construct template" ;
  ns0:constraint [
    a ns1:Attribute ;
    rdfs:comment "The CONSTRUCT query wrapped by this template." ;
    ns1:valueType <http://spinrdf.org/sp#Construct> ;
    ns1:predicate ns0:body ;
    ns1:minCount 0 ;
    ns1:maxCount 1
  ] .

<http://spinrdf.org/sp#Construct> rdfs:subClassOf ns0:Rule .
ns0:Rule
  a rdfs:Class ;
  rdfs:subClassOf <http://spinrdf.org/sp#Command> ;
  rdfs:label "Rule" ;
  rdfs:comment "Groups together the kinds of SPARQL commands that can appear as SPIN rules and constructors: CONSTRUCT, DELETE WHERE and DELETE/INSERT. This class is never to be instantiated directly." .

ns0:Modules
  a rdfs:Class ;
  rdfs:subClassOf rdfs:Resource ;
  rdfs:label "Modules" ;
  rdfs:comment "An \"artificial\" parent class for all Functions and Templates." ;
  ns0:constructor [ a ns1:ConstructDefaultValues ] .

ns0:MagicProperty
  a rdfs:Class ;
  rdfs:subClassOf rdf:Property, ns0:Function ;
  rdfs:label "Magic property" .

ns0:Function
  a rdfs:Class ;
  rdfs:subClassOf ns0:Module ;
  rdfs:label "Function" ;
  rdfs:comment "Metaclass for functions that can be used in SPARQL expressions (e.g. FILTER or BIND). The function themselves are classes that are instances of this metaclass. Function calls are instances of the function classes, with property values for the arguments." ;
  ns0:constraint [
    a ns1:Attribute ;
    rdfs:comment "the body of the function" ;
    ns1:predicate ns0:body ;
    ns1:minCount 0 ;
    ns1:maxCount 1
  ] .

ns0:UpdateTemplate
  a rdfs:Class ;
  rdfs:subClassOf ns0:Template ;
  rdfs:label "Update template" ;
  rdfs:comment "A SPIN template that has an UPDATE command as its body." ;
  ns0:constraint [
    a ns1:Attribute ;
    rdfs:comment "The UPDATE command wrapped by this template." ;
    ns1:valueType <http://spinrdf.org/sp#Update> ;
    ns1:predicate ns0:body ;
    ns1:minCount 0 ;
    ns1:maxCount 1
  ] .

ns0:TableDataProvider
  a rdfs:Class ;
  rdfs:subClassOf rdfs:Class ;
  rdfs:label "Table data provider" ;
  rdfs:comment """An abstraction of objects that can produce tabular data. This serves as a base class of spin:SelectTemplate, because SELECT queries can produce tables with columns for each result variable. However, other types of TableDataProviders are conceivable by other frameworks, and this class may prove as a useful shared foundation.

TableDataProviders can link to definitions of columns via spin:column, and these definitions can inform rendering engines.""" .

ns0:Module
  a rdfs:Class ;
  rdfs:subClassOf rdfs:Class ;
  rdfs:label "Module" ;
  rdfs:comment "An abstract building block of a SPARQL system. A Module can take Arguments as input and applies them on an input RDF Graph. The Arguments should be declared as spin:constraints." .

ns0:LibraryOntology
  a rdfs:Class ;
  rdfs:subClassOf owl:Ontology ;
  rdfs:label "Library ontology" ;
  rdfs:comment "A marker class that can be attached to base URIs (ontologies) to instruct SPIN engines that this ontology only contains a library of SPIN declarations. Library Ontologies should be ignored by SPIN inference engines even if they have been imported by a domain model. For example, a SPIN version of OWL RL may contain all the OWL RL axioms, attached to owl:Thing, but nothing else. However, when executed, these axioms should not be executed over themselves, because we don't want the system to reason about the SPIN triples to speed up things." .

ns0:SelectTemplate
  a rdfs:Class ;
  rdfs:subClassOf ns0:Template, ns0:TableDataProvider ;
  rdfs:label "Select template" ;
  rdfs:comment "A SPIN template that wraps a SELECT query." ;
  ns0:constraint [
    a ns1:Attribute ;
    rdfs:comment "The SELECT query wrapped by this template." ;
    ns1:valueType <http://spinrdf.org/sp#Select> ;
    ns1:predicate ns0:body ;
    ns1:minCount 0 ;
    ns1:maxCount 1
  ] .

ns0:RuleProperty
  a rdfs:Class ;
  rdfs:subClassOf rdf:Property ;
  rdfs:label "Rule property" ;
  rdfs:comment "The metaclass of spin:rule and its subproperties. spin:RuleProperties can have additional metadata attached to them." .

ns0:Column
  a rdfs:Class ;
  rdfs:subClassOf rdfs:Resource ;
  rdfs:label "Column" ;
  rdfs:comment "Provides metadata about a column in the result set of a (SPARQL) query, for example of the body queries of SPIN templates. Columns can define human-readable labels that serve as column titles, using rdfs:label." .

ns0:columnType
  a rdf:Property ;
  rdfs:subPropertyOf ns0:systemProperty ;
  rdfs:range rdfs:Class ;
  rdfs:label "column type" ;
  rdfs:domain ns0:Column ;
  rdfs:comment "The datatype or resource type of a spin:Column. For example this is useful as metadata to inform a rendering engine that numeric columns (e.g. xsd:float) need to be right-aligned." .

ns0:systemProperty
  a rdf:Property ;
  rdfs:label "system property" ;
  rdfs:comment "An \"abstract\" base property that groups together those system properties that the user will hardly ever need to see in property trees. This property may be dropped in future versions of this ontology - right now it's mainly here for convenience." .

ns0:abstract
  a rdf:Property ;
  rdfs:subPropertyOf ns0:systemProperty ;
  rdfs:range xsd:boolean ;
  rdfs:label "abstract" ;
  rdfs:domain ns0:Module ;
  rdfs:comment "Can be set to true to indicate that this module shall not be instantiated. Abstract modules are only there to organize other modules into hierarchies." .

ns0:violationRoot
  a rdf:Property ;
  rdfs:subPropertyOf ns0:systemProperty ;
  rdfs:range rdfs:Resource ;
  rdfs:label "violation root" ;
  rdfs:domain ns0:ConstraintViolation ;
  rdfs:comment "The root resource of the violation (often ?this in the constraint body)." .

ns0:violationSource
  a rdf:Property ;
  rdfs:subPropertyOf ns0:systemProperty ;
  rdfs:range rdfs:Resource ;
  rdfs:label "violation source" ;
  rdfs:domain ns0:ConstraintViolation ;
  rdfs:comment "Can be used to link a spin:ConstraintViolation with the query or template call that caused it. This property is typically filled in automatically by the constraint checking engine and does not need to be set manually. However, it can be useful to learn more about the origin of a violation." .

ns0:columnWidth
  a rdf:Property ;
  rdfs:subPropertyOf ns0:systemProperty ;
  rdfs:range xsd:integer ;
  rdfs:label "column width" ;
  rdfs:domain ns0:Column ;
  rdfs:comment "The preferred width of the associated Column, for display purposes. Values in pixels (rendering engines may multiply the values depending on resolution)." .

ns0:violationDetail
  a rdf:Property ;
  rdfs:subPropertyOf ns0:systemProperty ;
  rdfs:range ns0:ConstraintViolation ;
  rdfs:label "violation detail" ;
  rdfs:domain ns0:ConstraintViolation ;
  rdfs:comment "Links a (parent) spin:ConstraintViolation with one or more (child) spin:ConstraintViolations that provide details on the parent violation. This is commonly used in conjunction with spin:constructViolations to indicate that certain violations have triggered the parent violation." .

ns0:cachableForOntologies
  a rdf:Property ;
  rdfs:subPropertyOf ns0:systemProperty ;
  rdfs:range xsd:boolean ;
  rdfs:label "cachable for ontologies" ;
  rdfs:domain ns0:Function ;
  rdfs:comment "Can be set to true to instruct the SPIN engine that the outcome of the function does not depend on any instances/indivuduals in the current query graph, but only on the definitions of classes, properties and shapes. Engines may cache the results of all calls to the associated function. Functions should only be marked as cachable if the same combination of input arguments always returns the same result." .

ns0:symbol
  a rdf:Property ;
  rdfs:subPropertyOf ns0:systemProperty ;
  rdfs:range xsd:string ;
  rdfs:label "symbol" ;
  rdfs:domain ns0:Function ;
  rdfs:comment "The symbol of a function, e.g. \"=\" for the eq function." .

ns0:violationLevel
  a rdf:Property ;
  rdfs:subPropertyOf ns0:systemProperty ;
  rdfs:range ns0:ConstraintViolationLevel ;
  rdfs:label "violation level" ;
  rdfs:domain ns0:ConstraintViolation ;
  rdfs:comment "An optional attribute of ConstraintViolations to point at a violation level (such as Error and Warning). Defaults to spin:Error." .

ns0:private
  a rdf:Property ;
  rdfs:subPropertyOf ns0:systemProperty ;
  rdfs:range xsd:boolean ;
  rdfs:label "private" ;
  rdfs:domain ns0:Module ;
  rdfs:comment "Can be set to true to indicate that a SPIN function or template is only meant to be used as a helper of other modules, but not directly. Among others, this allows user interfaces to filter out private modules. Furthermore, it tells potential users of this module that they should avoid using this module, as it may not be stable." .

ns0:cachable
  a rdf:Property ;
  rdfs:subPropertyOf ns0:systemProperty ;
  rdfs:range xsd:boolean ;
  rdfs:label "cachable" ;
  rdfs:domain ns0:Function ;
  rdfs:comment "Can be set to true to instruct the SPIN engine that it may cache the results of all calls to the associated function. Functions should only be marked as cachable if the same combination of input arguments always returns the same result. Functions that query a graph or other background data that may change over time should not be cached. Caching can significantly improve performance of frequently needed functions." .

ns0:returnType
  a rdf:Property ;
  rdfs:subPropertyOf ns0:systemProperty ;
  rdfs:range rdfs:Class ;
  rdfs:label "return type" ;
  rdfs:domain ns0:Function ;
  rdfs:comment "The return type of a Function, e.g. xsd:string." .

ns0:fix
  a rdf:Property ;
  rdfs:subPropertyOf ns0:systemProperty ;
  rdfs:range ns0:UpdateTemplate ;
  rdfs:label "fix" ;
  rdfs:domain ns0:ConstraintViolation ;
  rdfs:comment "Can be used to link a ConstraintViolation with one or more UPDATE Templates that would help fix the violation." .

ns0:column
  a rdf:Property ;
  rdfs:subPropertyOf ns0:systemProperty ;
  rdfs:range ns0:Column ;
  rdfs:label "column" ;
  rdfs:domain ns0:TableDataProvider ;
  rdfs:comment "Can link a TableDataProvider (esp. SelectTemplate) with one or more columns that provide metadata for rendering purposes. Columns can be sorted by their spin:columnIndex (which must align with the ordering of variables in the SELECT query starting with 0). Not all result variables of the underlying query need to have a matching spin:Column." .

ns0:labelTemplate
  a rdf:Property ;
  rdfs:subPropertyOf ns0:systemProperty ;
  rdfs:range xsd:string ;
  rdfs:label "label template" ;
  rdfs:domain ns0:Template ;
  rdfs:comment "A template string for displaying instantiations of a module in human-readable form. The template may contain the argument variable names in curly braces to support substitution. For example, \"The number of values of the {?arg1} property.\"" .

ns0:constraint
  a rdf:Property ;
  rdfs:subPropertyOf ns0:query ;
  rdfs:label "constraint" ;
  rdfs:domain rdfs:Class ;
  rdfs:comment "Links a class with constraints on its instances. The values of this property are \"axioms\" expressed as CONSTRUCT or ASK queries where the variable ?this refers to the instances of the surrounding class. ASK queries must evaluate to false for each member of this class - returning true means that the instance ?this violates the constraint. CONSTRUCT queries must create instances of spin:ConstraintViolation to provide details on the reason for the violation." .

ns0:query
  a rdf:Property ;
  rdfs:subPropertyOf ns0:command ;
  rdfs:range <http://spinrdf.org/sp#Query> ;
  rdfs:label "query" ;
  rdfs:comment "Can be used to point from any resource to a Query." .

ns0:update
  a rdf:Property ;
  rdfs:subPropertyOf ns0:command ;
  rdfs:range <http://spinrdf.org/sp#Update> ;
  rdfs:label "update" ;
  rdfs:comment "Can be used to point from any resource to an Update." .

ns0:command
  a rdf:Property ;
  rdfs:range <http://spinrdf.org/sp#Command> ;
  rdfs:label "command" ;
  rdfs:comment "Can be used to link a resource with a SPARQL query or update request (sp:Command)." .

ns0:constructor
  a rdf:Property ;
  rdfs:subPropertyOf ns0:command ;
  rdfs:range ns0:Rule ;
  rdfs:label "constructor" ;
  rdfs:domain rdfs:Class ;
  rdfs:comment "Can be used to attach a \"constructor\" to a class. A constructor is a SPARQL CONSTRUCT query or INSERT/DELETE Update operation that can add initial values to the current instance. At execution time, the variable ?this is bound to the current instance. Tools can call constructors of a class and its superclasses when an instance of a class has been created. Constructors will also be used to initialize resources that have received a new rdf:type triple as a result of spin:rules firing." .

ns0:violationValue
  a rdf:Property ;
  rdfs:subPropertyOf ns0:systemProperty ;
  rdfs:label "violation value" ;
  rdfs:domain ns0:ConstraintViolation ;
  rdfs:comment "An optional attribute of ConstraintViolations to point at a specific RDF node that caused the violation. Should be accessible from the root via the violationPath." .

ns0:inverseBody
  a rdf:Property ;
  rdfs:subPropertyOf ns0:systemProperty ;
  rdfs:range <http://spinrdf.org/sp#Select> ;
  rdfs:label "inverse body" ;
  rdfs:domain ns0:MagicProperty ;
  rdfs:comment "The inverse body of a magic property - used to provide a more optimized query if there is one result variable (on the right). The values must be instances of Select and must return SELECT ?arg1 etc. The WHERE clause can access the variable ?object to refer to the provided value on the right hand side of the magic property." .

ns0:rulePropertyMaxIterationCount
  a rdf:Property ;
  rdfs:subPropertyOf ns0:systemProperty ;
  rdfs:range xsd:integer ;
  rdfs:label "rule property max iteration count" ;
  rdfs:domain ns0:RuleProperty ;
  rdfs:comment "Can be attached to spin:rule (or subclasses thereof) to instruct a SPIN rules engine that it shall only execute the rules max times. If no value is specified, then the rules will be executed with no specific limit." .

ns0:columnIndex
  a rdf:Property ;
  rdfs:subPropertyOf ns0:systemProperty ;
  rdfs:range xsd:integer ;
  rdfs:label "column index" ;
  rdfs:domain ns0:Column ;
  rdfs:comment "The index of a column (from left to right) starting at 0." .

ns0:violationPath
  a rdf:Property ;
  rdfs:subPropertyOf ns0:systemProperty ;
  rdfs:range rdfs:Resource ;
  rdfs:label "violation path" ;
  rdfs:domain ns0:ConstraintViolation ;
  rdfs:comment "An optional attribute of ConstraintViolations to provide a path expression from the root resource to the value that is invalid. If this is a URI then the path represents the predicate of a subject/predicate combination. Otherwise it should be a blank node of type sp:Path." .

ns0:nextRuleProperty
  a rdf:Property ;
  rdfs:subPropertyOf ns0:systemProperty ;
  rdfs:range ns0:RuleProperty ;
  rdfs:label "next rule property" ;
  rdfs:domain ns0:RuleProperty ;
  rdfs:comment "Can be used to link two sub-properties of spin:rule (or spin:rule itself) to instruct the SPIN engine to execute one set of rules before another one. The values of the subject property will be executed before those of the object property." .

ns0:thisUnbound
  a rdf:Property ;
  rdfs:subPropertyOf ns0:systemProperty ;
  rdfs:range xsd:boolean ;
  rdfs:label "this unbound" ;
  rdfs:domain <http://spinrdf.org/sp#Construct> ;
  rdfs:comment "Can be set to true for SPIN rules and constraints that do not require pre-binding the variable ?this with all members of the associated class. This flag should only be set to true if the WHERE clause is sufficiently strong to only bind instances of the associated class, or its subclasses. In those cases, the engine can greatly improve performance of query execution, because it does not need to add clauses to narrow down the WHERE clause." .

ns0:construct
  a ns0:MagicProperty ;
  rdfs:subClassOf ns0:MagicProperties ;
  rdfs:label "construct" ;
  rdfs:comment """Evaluates a given sp:Construct or SPIN template call (first argument on the left hand side) and binds the resulting triples to the variables on the right hand side.

Example:

    (?query "this" owl:Thing) spin:construct (?s ?p ?o)

will execute the sp:Construct ?query using the binding of owl:Thing to ?this. The resulting triples will be bound to ?s, ?p and ?o. If any of ?s ?p ?o are bound, it will only return the matching triples.""" .

ns0:MagicProperties
  a ns0:MagicProperty ;
  rdfs:subPropertyOf ns0:systemProperty ;
  rdfs:subClassOf ns0:Functions ;
  rdfs:label "Magic properties" ;
  rdfs:comment "An abstract superclass that can be used to group all spin:MagicProperty instances under a single parent class." ;
  ns0:abstract true .

ns0:Functions
  a ns0:Function ;
  rdfs:subClassOf ns0:Modules ;
  rdfs:label "Functions" ;
  rdfs:comment "An abstract base class for all defined functions. This class mainly serves as a shared root so that the various instances of the Function metaclass are grouped together." ;
  ns0:abstract true .

ns0:UpdateTemplates
  a ns0:UpdateTemplate ;
  rdfs:subClassOf ns0:Templates ;
  rdfs:label "Update templates" ;
  rdfs:comment "Suggested abstract base class for all UpdateTemplates." ;
  ns0:abstract true .

ns0:Templates
  a ns0:Template ;
  rdfs:subClassOf ns0:Modules ;
  rdfs:label "Templates" ;
  rdfs:comment "Suggested abstract base class for all Templates." ;
  ns0:abstract true .

ns0:_arg2
  a <http://spinrdf.org/sp#Variable> ;
  ns2:varName "arg2" .

ns2:Modify rdfs:subClassOf ns0:Rule .
ns0:eval
  a ns0:Function ;
  rdfs:subClassOf ns0:Functions ;
  rdfs:label "eval" ;
  rdfs:comment "Evaluates a given SPIN expression or SELECT or ASK query, and returns its result. The first argument must be the expression in SPIN RDF syntax. All other arguments must come in pairs: first a property name, and then a value. These name/value pairs will be pre-bound variables for the execution of the expression." .

ns0:SelectTemplates
  a ns0:SelectTemplate ;
  rdfs:subClassOf ns0:Templates ;
  rdfs:label "Select templates" ;
  rdfs:comment "Suggested abstract base class for all SelectTemplates." ;
  ns0:abstract true .

ns0:Warning
  a ns0:ConstraintViolationLevel ;
  rdfs:label "Warning" ;
  rdfs:comment "Indicates that the associated constraint violation is a problem that may not have to be fixed but may lead to issues in the future." .

ns0:constructViolations
  a ns0:MagicProperty ;
  rdfs:subClassOf ns0:MagicProperties ;
  rdfs:label "construct violations" ;
  rdfs:comment """Takes an instance (?arg1) and a class definition (?arg2) and returns all constraint violations for that instance as triples. This magic property basically runs its own constraint checker for defining meta-constraints, and can also be used to classify instances.

Example:

    CONSTRUCT {
        ?s ?p ?o .
    }
    WHERE {
        (my:Person my:OldPerson) spin:constructViolations (?s ?p ?o) .
    }""" ;
  ns0:constraint [
    a ns1:Argument ;
    rdfs:comment "The class that this type is validated against." ;
    ns1:valueType rdfs:Class ;
    ns1:predicate ns2:arg2
  ], [
    a ns1:Argument ;
    rdfs:comment "The instance to check." ;
    ns1:valueType rdfs:Resource ;
    ns1:predicate ns2:arg1
  ] .

ns0:AskTemplates
  a ns0:AskTemplate ;
  rdfs:subClassOf ns0:Templates ;
  rdfs:label "Ask templates" ;
  rdfs:comment "Suggested abstract base class for all AskTemplates." ;
  ns0:abstract true .

ns0:ask
  a ns0:Function ;
  rdfs:subClassOf ns0:Functions ;
  rdfs:label "ask" ;
  rdfs:comment """Executes a given ASK query and returns its boolean result. The first argument must point to an sp:Ask or a SPIN template call that has an ASK query as its body. All subsequent argument can come in pairs, with the first one being a variable name and the second its binding.

Example:

    BIND (spin:ask(?query, "this", owl:Thing) AS ?result) .

will execute the sp:Ask behind ?query with the variable ?this pre-bound to owl:Thing.""" .

ns0:_arg3
  a ns2:Variable ;
  ns2:varName "arg3" .

ns0:Fatal
  a ns0:ConstraintViolationLevel ;
  rdfs:label "Fatal" ;
  rdfs:comment "Indicates that the associated constraint violation is a severe error that must be fixed. Constraint checking engines may decide to stop further evaluation once a fatal error has been detected." .

ns0:select
  a ns0:MagicProperty ;
  rdfs:subClassOf ns0:MagicProperties ;
  rdfs:label "select" ;
  rdfs:comment """Executes a given SELECT or ASK query (or a corresponding SPIN template call) and binds its result rows to the variables specified on the right hand side. May also pre-bind variables for the query execution, using name-value pairs on the left hand side.

Example:

    (?query "this" owl:Thing) spin:select (?a ?b)

will execute the sp:Select or sp:Ask that ?query points to and pre-bind ?this with the value of owl:Thing for the execution of the query. The first result variable of the query's result set will be bound to ?a, the second to ?b etc. If the nodes on the right are bound (or constants) then it will match with the values from the result set.

Note that the first argument on the left hand side can be an instance of a SPIN template (but not the template itself). If you need to execute a template, retrieve its spin:body first.""" .

ns0:rule
  a ns0:RuleProperty ;
  rdfs:subPropertyOf ns0:command ;
  rdfs:range ns0:Rule ;
  rdfs:label "rule" ;
  rdfs:domain rdfs:Class ;
  rdfs:comment "An inferencing rule attached to a class. Rules are expressed as CONSTRUCT queries or INSERT/DELETE operations where the variable ?this will be bound to the current instance of the class. These inferences can be used to derive new values from existing values at the instance." .

ns0:_arg4
  a ns2:Variable ;
  ns2:varName "arg4" .

ns0:_this
  a ns2:Variable ;
  rdfs:label "_this" ;
  rdfs:comment "A system variable representing the current context instance in a rule or constraint." ;
  ns2:varName "this" .

ns0:violatesConstraints
  a ns0:Function ;
  rdfs:subClassOf ns0:Functions ;
  rdfs:label "violates constraints" ;
  rdfs:comment "Checks whether a given instance (?arg1) violates any of the constraints defined for a given class (?arg2)." ;
  ns0:returnType xsd:boolean .

ns0:Error
  a ns0:ConstraintViolationLevel ;
  rdfs:label "Error" ;
  rdfs:comment "Indicates that the associated constraint violation is an error that should be fixed." .

ns0:ConstructTemplates
  a ns0:ConstructTemplate ;
  rdfs:subClassOf ns0:Templates ;
  rdfs:label "Construct templates" ;
  rdfs:comment "Suggested abstract base class for all ConstructTemplates." ;
  ns0:abstract true .

ns0:_arg5
  a ns2:Variable ;
  ns2:varName "arg5" .

ns0:_arg1
  a ns2:Variable ;
  ns2:varName "arg1" .

ns2:DeleteWhere rdfs:subClassOf ns0:Rule .
ns0:Info
  a ns0:ConstraintViolationLevel ;
  rdfs:label "Info" ;
  rdfs:comment "Indicates that the associated constraint violation is a not a problem. This level can be used for diagnostic and debugging purposes." .

ns0:evalInGraph
  a ns0:Function ;
  rdfs:subClassOf ns0:Functions ;
  rdfs:label "eval in graph" ;
  rdfs:comment "Evaluates a given SPIN expression or SELECT or ASK query, and returns its result. The first argument must be the expression in SPIN RDF syntax. This RDF representation of this expression is expected to be in the currently active query graph. The second argument is the URI of a graph that the actual query shall be evaluated against. All other arguments must come in pairs: first a property name, and then a value. These name/value pairs will be pre-bound variables for the execution of the expression." .

ns0:imports
  a owl:OntologyProperty ;
  rdfs:subPropertyOf ns0:systemProperty ;
  rdfs:range owl:Ontology ;
  rdfs:label "imports" ;
  rdfs:domain owl:Ontology ;
  rdfs:comment "Can be used to link an RDF graph (usually the instance of owl:Ontology) with a SPIN library to define constraints. SPIN-aware tools should include the definitions from those libraries for constraint checking. Using such libraries is a simpler alternative than explicitly importing them using owl:imports, because it does not force all the SPIN triples into the RDF model." .

